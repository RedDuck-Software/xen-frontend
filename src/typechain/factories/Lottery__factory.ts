/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lotteryToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_participateInterval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "OnlySimulatedBackend",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "wonAmount",
        type: "uint256",
      },
    ],
    name: "WinnerSelect",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenAmount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllWinners",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "winnerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "wonAmount",
            type: "uint256",
          },
        ],
        internalType: "struct Lottery.WinnersInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getParticipants",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "participantAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endPoint",
            type: "uint256",
          },
        ],
        internalType: "struct Lottery.ParticipantsInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "interval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastWonAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lotteryToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextParticipateTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenAmount",
        type: "uint256",
      },
    ],
    name: "participate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalAllTimePrizePool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalGamesPlayed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalPrizePool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "usersContractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenAmount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001be238038062001be283398181016040528101906200003791906200013b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a190620001a3565b60405180910390fd5b80600181905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508042620000ff9190620001d6565b6002819055505050620002fd565b6000815190506200011e81620002c9565b92915050565b6000815190506200013581620002e3565b92915050565b600080604083850312156200014f57600080fd5b60006200015f858286016200010d565b9250506020620001728582860162000124565b9150509250929050565b60006200018b601e83620001c5565b91506200019882620002a0565b602082019050919050565b60006020820190508181036000830152620001be816200017c565b9050919050565b600082825260208201905092915050565b6000620001e38262000267565b9150620001f08362000267565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000228576200022762000271565b5b828201905092915050565b6000620002408262000247565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4c6f74746572793a20696e76616c6964205f6c6f7474657279546f6b656e0000600082015250565b620002d48162000233565b8114620002e057600080fd5b50565b620002ee8162000267565b8114620002fa57600080fd5b50565b6118d5806200030d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636e04ff0d116100a2578063b6b55f2511610071578063b6b55f2514610285578063d5b8d644146102a1578063dc6b8627146102d1578063f54eb67e146102ef578063fe1881841461030d5761010b565b80636e04ff0d146101fc578063845c93061461022d5780639453946714610249578063947a36fb146102675761010b565b80634585e33b116100de5780634585e33b146101865780635aa68ac0146101a25780635c492129146101c05780636c9230db146101de5761010b565b8063141e538a146101105780632e1a7d4d1461012e578063398ab9a71461014a5780633c1e044b14610168575b600080fd5b61011861032b565b60405161012591906114db565b60405180910390f35b6101486004803603810190610143919061103d565b610331565b005b6101526104ba565b60405161015f91906114db565b60405180910390f35b6101706104c0565b60405161017d91906114db565b60405180910390f35b6101a0600480360381019061019b9190610ff8565b6104c6565b005b6101aa610522565b6040516101b791906113c7565b60405180910390f35b6101c86105f5565b6040516101d591906114db565b60405180910390f35b6101e66105fb565b6040516101f391906114db565b60405180910390f35b61021660048036038101906102119190610ff8565b610603565b60405161022492919061140b565b60405180910390f35b6102476004803603810190610242919061103d565b610616565b005b61025161087e565b60405161025e919061134c565b60405180910390f35b61026f6108a2565b60405161027c91906114db565b60405180910390f35b61029f600480360381019061029a919061103d565b6108a8565b005b6102bb60048036038101906102b69190610fa6565b6109f5565b6040516102c891906114db565b60405180910390f35b6102d9610a0d565b6040516102e691906113e9565b60405180910390f35b6102f7610acc565b60405161030491906114db565b60405180910390f35b610315610ad2565b604051610322919061134c565b60405180910390f35b60055481565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103aa9061147b565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161040e92919061139e565b602060405180830381600087803b15801561042857600080fd5b505af115801561043c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104609190610fcf565b5080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104b091906115eb565b9250508190555050565b60045481565b60025481565b60006104d28383610603565b50905080610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050c9061149b565b60405180910390fd5b61051d610af8565b505050565b60606009805480602002602001604051908101604052809291908181526020016000905b828210156105ec57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610546565b50505050905090565b60065481565b600042905090565b6000606060025442101591509250929050565b60008111610659576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106509061143b565b60405180910390fd5b60025442111561069e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106959061145b565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610720576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610717906114bb565b60405180910390fd5b600960405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018381526020016004548152602001836004546107659190611595565b815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050806004546108069190611595565b60048190555080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461085b91906115eb565b9250508190555080600560008282546108749190611595565b9250508190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60008114156108ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e39061143b565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161094993929190611367565b602060405180830381600087803b15801561096357600080fd5b505af1158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190610fcf565b5080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109eb9190611595565b9250508190555050565b60036020528060005260406000206000915090505481565b6060600a805480602002602001604051908101604052809291908181526020016000905b82821015610ac357838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505081526020019060010190610a31565b50505050905090565b60075481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006009805490501415610b1f5760015442610b149190611595565b600281905550610d02565b6000610b29610d04565b9050600a60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001600454815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600454600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c689190611595565b92505081905550600454600781905550600160066000828254610c8b9190611595565b9250508190555060015442610ca09190611595565b6002819055506004548173ffffffffffffffffffffffffffffffffffffffff167f6fd0f3d9dfe1fc855741134e12830945e13fd19fd6a1a40acced1344e44c5be360405160405180910390a360096000610cfa9190610ea3565b600460009055505b565b60008060016004544442604051602001610d1f929190611320565b6040516020818303038152906040528051906020012060001c610d4291906116ed565b610d4c9190611595565b9050600080600090505b6009805490508111610e9a57600060098281548110610d9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060040201600201548410158015610e0a575060098281548110610df4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060040201600301548411155b90508015610e865760098281548110610e4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925050610e9a565b508080610e929061169a565b915050610d56565b50809250505090565b5080546000825560040290600052602060002090810190610ec49190610ec7565b50565b5b80821115610f1957600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905550600401610ec8565b5090565b600081359050610f2c8161185a565b92915050565b600081519050610f4181611871565b92915050565b60008083601f840112610f5957600080fd5b8235905067ffffffffffffffff811115610f7257600080fd5b602083019150836001820283011115610f8a57600080fd5b9250929050565b600081359050610fa081611888565b92915050565b600060208284031215610fb857600080fd5b6000610fc684828501610f1d565b91505092915050565b600060208284031215610fe157600080fd5b6000610fef84828501610f32565b91505092915050565b6000806020838503121561100b57600080fd5b600083013567ffffffffffffffff81111561102557600080fd5b61103185828601610f47565b92509250509250929050565b60006020828403121561104f57600080fd5b600061105d84828501610f91565b91505092915050565b60006110728383611267565b60808301905092915050565b600061108a83836112bc565b60408301905092915050565b61109f8161161f565b82525050565b6110ae8161161f565b82525050565b60006110bf82611516565b6110c98185611551565b93506110d4836114f6565b8060005b838110156111055781516110ec8882611066565b97506110f783611537565b9250506001810190506110d8565b5085935050505092915050565b600061111d82611521565b6111278185611562565b935061113283611506565b8060005b8381101561116357815161114a888261107e565b975061115583611544565b925050600181019050611136565b5085935050505092915050565b61117981611631565b82525050565b600061118a8261152c565b6111948185611573565b93506111a4818560208601611667565b6111ad8161177c565b840191505092915050565b60006111c5601c83611584565b91506111d08261178d565b602082019050919050565b60006111e8601c83611584565b91506111f3826117b6565b602082019050919050565b600061120b601a83611584565b9150611216826117df565b602082019050919050565b600061122e601a83611584565b915061123982611808565b602082019050919050565b6000611251601c83611584565b915061125c82611831565b602082019050919050565b60808201600082015161127d6000850182611096565b50602082015161129060208501826112eb565b5060408201516112a360408501826112eb565b5060608201516112b660608501826112eb565b50505050565b6040820160008201516112d26000850182611096565b5060208201516112e560208501826112eb565b50505050565b6112f48161165d565b82525050565b6113038161165d565b82525050565b61131a6113158261165d565b6116e3565b82525050565b600061132c8285611309565b60208201915061133c8284611309565b6020820191508190509392505050565b600060208201905061136160008301846110a5565b92915050565b600060608201905061137c60008301866110a5565b61138960208301856110a5565b61139660408301846112fa565b949350505050565b60006040820190506113b360008301856110a5565b6113c060208301846112fa565b9392505050565b600060208201905081810360008301526113e181846110b4565b905092915050565b600060208201905081810360008301526114038184611112565b905092915050565b60006040820190506114206000830185611170565b8181036020830152611432818461117f565b90509392505050565b60006020820190508181036000830152611454816111b8565b9050919050565b60006020820190508181036000830152611474816111db565b9050919050565b60006020820190508181036000830152611494816111fe565b9050919050565b600060208201905081810360008301526114b481611221565b9050919050565b600060208201905081810360008301526114d481611244565b9050919050565b60006020820190506114f060008301846112fa565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006115a08261165d565b91506115ab8361165d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156115e0576115df61171e565b5b828201905092915050565b60006115f68261165d565b91506116018361165d565b9250828210156116145761161361171e565b5b828203905092915050565b600061162a8261163d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561168557808201518184015260208101905061166a565b83811115611694576000848401525b50505050565b60006116a58261165d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116d8576116d761171e565b5b600182019050919050565b6000819050919050565b60006116f88261165d565b91506117038361165d565b9250826117135761171261174d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f4c6f74746572793a20696e76616c696420746f6b656e416d6f756e7400000000600082015250565b7f4c6f74746572793a2068617320616c7265616479207374617274656400000000600082015250565b7f4c6f74746572793a206e6f20656e6f7567682062616c616e6365000000000000600082015250565b7f4c6f74746572793a204e6f206e65656420746f2075706b656570000000000000600082015250565b7f4c6f74746572793a696e73756666696369656e742062616c616e636500000000600082015250565b6118638161161f565b811461186e57600080fd5b50565b61187a81611631565b811461188557600080fd5b50565b6118918161165d565b811461189c57600080fd5b5056fea26469706673582212209e40719e335bb7853a319ef83add13399ef1d338b20baf8d32d690973339a06164736f6c63430008040033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lotteryToken: PromiseOrValue<string>,
    _participateInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Lottery> {
    return super.deploy(
      _lotteryToken,
      _participateInterval,
      overrides || {}
    ) as Promise<Lottery>;
  }
  override getDeployTransaction(
    _lotteryToken: PromiseOrValue<string>,
    _participateInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lotteryToken,
      _participateInterval,
      overrides || {}
    );
  }
  override attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  override connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
