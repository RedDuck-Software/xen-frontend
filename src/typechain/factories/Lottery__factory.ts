/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lotteryToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_participateInterval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "OnlySimulatedBackend",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "wonAmount",
        type: "uint256",
      },
    ],
    name: "WinnerSelect",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenAmount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllWinners",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "winnerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "wonAmount",
            type: "uint256",
          },
        ],
        internalType: "struct Lottery.WinnersInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getParticipants",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "participantAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endPoint",
            type: "uint256",
          },
        ],
        internalType: "struct Lottery.ParticipantsInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "interval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastWonAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lotteryID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lotteryToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextParticipateTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenAmount",
        type: "uint256",
      },
    ],
    name: "participate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalAllTimePrizePool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalGamesPlayed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalPrizePool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "usersContractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "usersDrawBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenAmount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001d2e38038062001d2e83398181016040528101906200003791906200013b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a190620001a3565b60405180910390fd5b80600181905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508042620000ff9190620001d6565b6002819055505050620002fd565b6000815190506200011e81620002c9565b92915050565b6000815190506200013581620002e3565b92915050565b600080604083850312156200014f57600080fd5b60006200015f858286016200010d565b9250506020620001728582860162000124565b9150509250929050565b60006200018b601e83620001c5565b91506200019882620002a0565b602082019050919050565b60006020820190508181036000830152620001be816200017c565b9050919050565b600082825260208201905092915050565b6000620001e38262000267565b9150620001f08362000267565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000228576200022762000271565b5b828201905092915050565b6000620002408262000247565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4c6f74746572793a20696e76616c6964205f6c6f7474657279546f6b656e0000600082015250565b620002d48162000233565b8114620002e057600080fd5b50565b620002ee8162000267565b8114620002fa57600080fd5b50565b611a21806200030d6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636e04ff0d116100ad578063b6b55f2511610071578063b6b55f25146102e9578063d5b8d64414610305578063dc6b862714610335578063f54eb67e14610353578063fe1881841461037157610121565b80636e04ff0d14610242578063845c930614610273578063945394671461028f578063947a36fb146102ad5780639be064c1146102cb57610121565b80633c1e044b116100f45780633c1e044b146101ae5780634585e33b146101cc5780635aa68ac0146101e85780635c492129146102065780636c9230db1461022457610121565b80630da2286d14610126578063141e538a146101565780632e1a7d4d14610174578063398ab9a714610190575b600080fd5b610140600480360381019061013b9190611176565b61038f565b60405161014d9190611627565b60405180910390f35b61015e6103b4565b60405161016b9190611627565b60405180910390f35b61018e6004803603810190610189919061114d565b6103ba565b005b610198610543565b6040516101a59190611627565b60405180910390f35b6101b6610549565b6040516101c39190611627565b60405180910390f35b6101e660048036038101906101e19190611108565b61054f565b005b6101f06105ab565b6040516101fd9190611513565b60405180910390f35b61020e61067e565b60405161021b9190611627565b60405180910390f35b61022c610684565b6040516102399190611627565b60405180910390f35b61025c60048036038101906102579190611108565b61068c565b60405161026a929190611557565b60405180910390f35b61028d6004803603810190610288919061114d565b61069f565b005b610297610970565b6040516102a49190611498565b60405180910390f35b6102b5610994565b6040516102c29190611627565b60405180910390f35b6102d361099a565b6040516102e09190611627565b60405180910390f35b61030360048036038101906102fe919061114d565b6109a0565b005b61031f600480360381019061031a91906110b6565b610aed565b60405161032c9190611627565b60405180910390f35b61033d610b05565b60405161034a9190611535565b60405180910390f35b61035b610bc4565b6040516103689190611627565b60405180910390f35b610379610bca565b6040516103869190611498565b60405180910390f35b6005602052816000526040600020602052806000526040600020600091509150505481565b60075481565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561043c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610433906115c7565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016104979291906114ea565b602060405180830381600087803b1580156104b157600080fd5b505af11580156104c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e991906110df565b5080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105399190611737565b9250508190555050565b60065481565b60025481565b600061055b838361068c565b5090508061059e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610595906115e7565b60405180910390fd5b6105a6610bf0565b505050565b6060600b805480602002602001604051908101604052809291908181526020016000905b8282101561067557838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481525050815260200190600101906105cf565b50505050905090565b60085481565b600042905090565b6000606060025442101591509250929050565b600081116106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d990611587565b60405180910390fd5b600254421115610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e906115a7565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a090611607565b60405180910390fd5b8060056000600354815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461080b91906116e1565b92505081905550600b60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160065481526020018360065461085791906116e1565b815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301555050806006546108f891906116e1565b60068190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461094d9190611737565b92505081905550806007600082825461096691906116e1565b9250508190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60035481565b60008114156109e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109db90611587565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610a41939291906114b3565b602060405180830381600087803b158015610a5b57600080fd5b505af1158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9391906110df565b5080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ae391906116e1565b9250508190555050565b60046020528060005260406000206000915090505481565b6060600c805480602002602001604051908101604052809291908181526020016000905b82821015610bbb57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505081526020019060010190610b29565b50505050905090565b60095481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036000815480929190610c03906117e6565b91905055506000600b805490501415610c2f5760015442610c2491906116e1565b600281905550610e12565b6000610c39610e14565b9050600c60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001600654815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600654600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d7891906116e1565b92505081905550600654600981905550600160086000828254610d9b91906116e1565b9250508190555060015442610db091906116e1565b6002819055506006548173ffffffffffffffffffffffffffffffffffffffff167f6fd0f3d9dfe1fc855741134e12830945e13fd19fd6a1a40acced1344e44c5be360405160405180910390a3600b6000610e0a9190610fb3565b600660009055505b565b60008060016006544442604051602001610e2f92919061146c565b6040516020818303038152906040528051906020012060001c610e529190611839565b610e5c91906116e1565b9050600080600090505b600b805490508111610faa576000600b8281548110610eae577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060040201600201548410158015610f1a5750600b8281548110610f04577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060040201600301548411155b90508015610f9657600b8281548110610f5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925050610faa565b508080610fa2906117e6565b915050610e66565b50809250505090565b5080546000825560040290600052602060002090810190610fd49190610fd7565b50565b5b8082111561102957600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905550600401610fd8565b5090565b60008135905061103c816119a6565b92915050565b600081519050611051816119bd565b92915050565b60008083601f84011261106957600080fd5b8235905067ffffffffffffffff81111561108257600080fd5b60208301915083600182028301111561109a57600080fd5b9250929050565b6000813590506110b0816119d4565b92915050565b6000602082840312156110c857600080fd5b60006110d68482850161102d565b91505092915050565b6000602082840312156110f157600080fd5b60006110ff84828501611042565b91505092915050565b6000806020838503121561111b57600080fd5b600083013567ffffffffffffffff81111561113557600080fd5b61114185828601611057565b92509250509250929050565b60006020828403121561115f57600080fd5b600061116d848285016110a1565b91505092915050565b6000806040838503121561118957600080fd5b6000611197858286016110a1565b92505060206111a88582860161102d565b9150509250929050565b60006111be83836113b3565b60808301905092915050565b60006111d68383611408565b60408301905092915050565b6111eb8161176b565b82525050565b6111fa8161176b565b82525050565b600061120b82611662565b611215818561169d565b935061122083611642565b8060005b8381101561125157815161123888826111b2565b975061124383611683565b925050600181019050611224565b5085935050505092915050565b60006112698261166d565b61127381856116ae565b935061127e83611652565b8060005b838110156112af57815161129688826111ca565b97506112a183611690565b925050600181019050611282565b5085935050505092915050565b6112c58161177d565b82525050565b60006112d682611678565b6112e081856116bf565b93506112f08185602086016117b3565b6112f9816118c8565b840191505092915050565b6000611311601c836116d0565b915061131c826118d9565b602082019050919050565b6000611334601c836116d0565b915061133f82611902565b602082019050919050565b6000611357601a836116d0565b91506113628261192b565b602082019050919050565b600061137a601a836116d0565b915061138582611954565b602082019050919050565b600061139d601c836116d0565b91506113a88261197d565b602082019050919050565b6080820160008201516113c960008501826111e2565b5060208201516113dc6020850182611437565b5060408201516113ef6040850182611437565b5060608201516114026060850182611437565b50505050565b60408201600082015161141e60008501826111e2565b5060208201516114316020850182611437565b50505050565b611440816117a9565b82525050565b61144f816117a9565b82525050565b611466611461826117a9565b61182f565b82525050565b60006114788285611455565b6020820191506114888284611455565b6020820191508190509392505050565b60006020820190506114ad60008301846111f1565b92915050565b60006060820190506114c860008301866111f1565b6114d560208301856111f1565b6114e26040830184611446565b949350505050565b60006040820190506114ff60008301856111f1565b61150c6020830184611446565b9392505050565b6000602082019050818103600083015261152d8184611200565b905092915050565b6000602082019050818103600083015261154f818461125e565b905092915050565b600060408201905061156c60008301856112bc565b818103602083015261157e81846112cb565b90509392505050565b600060208201905081810360008301526115a081611304565b9050919050565b600060208201905081810360008301526115c081611327565b9050919050565b600060208201905081810360008301526115e08161134a565b9050919050565b600060208201905081810360008301526116008161136d565b9050919050565b6000602082019050818103600083015261162081611390565b9050919050565b600060208201905061163c6000830184611446565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006116ec826117a9565b91506116f7836117a9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561172c5761172b61186a565b5b828201905092915050565b6000611742826117a9565b915061174d836117a9565b9250828210156117605761175f61186a565b5b828203905092915050565b600061177682611789565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156117d15780820151818401526020810190506117b6565b838111156117e0576000848401525b50505050565b60006117f1826117a9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156118245761182361186a565b5b600182019050919050565b6000819050919050565b6000611844826117a9565b915061184f836117a9565b92508261185f5761185e611899565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f4c6f74746572793a20696e76616c696420746f6b656e416d6f756e7400000000600082015250565b7f4c6f74746572793a2068617320616c7265616479207374617274656400000000600082015250565b7f4c6f74746572793a206e6f20656e6f7567682062616c616e6365000000000000600082015250565b7f4c6f74746572793a204e6f206e65656420746f2075706b656570000000000000600082015250565b7f4c6f74746572793a696e73756666696369656e742062616c616e636500000000600082015250565b6119af8161176b565b81146119ba57600080fd5b50565b6119c68161177d565b81146119d157600080fd5b50565b6119dd816117a9565b81146119e857600080fd5b5056fea2646970667358221220b6b7c8ae1ec9002b772a4a68aaaa3df4e91eaea990e17f8529e0127af848b16264736f6c63430008040033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lotteryToken: PromiseOrValue<string>,
    _participateInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Lottery> {
    return super.deploy(
      _lotteryToken,
      _participateInterval,
      overrides || {}
    ) as Promise<Lottery>;
  }
  override getDeployTransaction(
    _lotteryToken: PromiseOrValue<string>,
    _participateInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lotteryToken,
      _participateInterval,
      overrides || {}
    );
  }
  override attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  override connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
