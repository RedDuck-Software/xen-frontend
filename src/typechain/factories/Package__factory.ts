/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Package, PackageInterface } from "../Package";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lotteryToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_participateInterval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "OnlySimulatedBackend",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "wonAmount",
        type: "uint256",
      },
    ],
    name: "WinnerSelect",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenAmount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllWinners",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "winnerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "wonAmount",
            type: "uint256",
          },
        ],
        internalType: "struct Lottery.WinnersInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getParticipants",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "participantAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endPoint",
            type: "uint256",
          },
        ],
        internalType: "struct Lottery.ParticipantsInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "interval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastWonAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lotteryToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextParticipateTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenAmount",
        type: "uint256",
      },
    ],
    name: "participate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalAllTimePrizePool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalGamesPlayed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalPrizePool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "usersContractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenAmount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e62380380610e6283398101604081905261002f916100be565b6001600160a01b0382166100895760405162461bcd60e51b815260206004820152601e60248201527f4c6f74746572793a20696e76616c6964205f6c6f7474657279546f6b656e0000604482015260640160405180910390fd5b6001819055600080546001600160a01b0319166001600160a01b0384161790556100b381426100f6565b6002555061011a9050565b600080604083850312156100d0578182fd5b82516001600160a01b03811681146100e6578283fd5b6020939093015192949293505050565b6000821982111561011557634e487b7160e01b81526011600452602481fd5b500190565b610d39806101296000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636e04ff0d116100a2578063b6b55f2511610071578063b6b55f25146101fb578063d5b8d6441461020e578063dc6b86271461022e578063f54eb67e14610243578063fe1881841461024c57600080fd5b80636e04ff0d1461018a578063845c9306146101b457806394539467146101c7578063947a36fb146101f257600080fd5b80634585e33b116100de5780634585e33b146101535780635aa68ac0146101665780635c4921291461017b5780636c9230db1461018457600080fd5b8063141e538a146101105780632e1a7d4d1461012c578063398ab9a7146101415780633c1e044b1461014a575b600080fd5b61011960055481565b6040519081526020015b60405180910390f35b61013f61013a366004610b56565b61025f565b005b61011960045481565b61011960025481565b61013f610161366004610ae9565b61036f565b61016e6103cf565b6040516101239190610b6e565b61011960065481565b42610119565b6101a6610198366004610ae9565b505060025442101590606090565b604051610123929190610c26565b61013f6101c2366004610b56565b610459565b6000546101da906001600160a01b031681565b6040516001600160a01b039091168152602001610123565b61011960015481565b61013f610209366004610b56565b610637565b61011961021c366004610a9b565b60036020526000908152604090205481565b61023661072e565b6040516101239190610bdb565b61011960075481565b6008546101da906001600160a01b031681565b336000908152600360205260409020548111156102c35760405162461bcd60e51b815260206004820152601a60248201527f4c6f74746572793a206e6f20656e6f7567682062616c616e636500000000000060448201526064015b60405180910390fd5b60005460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561030f57600080fd5b505af1158015610323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103479190610ac9565b503360009081526003602052604081208054839290610367908490610c9b565b909155505050565b600254421015806103c25760405162461bcd60e51b815260206004820152601a60248201527f4c6f74746572793a204e6f206e65656420746f2075706b65657000000000000060448201526064016102ba565b6103ca61079a565b505050565b60606009805480602002602001604051908101604052809291908181526020016000905b82821015610450576000848152602090819020604080516080810182526004860290920180546001600160a01b031683526001808201548486015260028201549284019290925260030154606083015290835290920191016103f3565b50505050905090565b600081116104a95760405162461bcd60e51b815260206004820152601c60248201527f4c6f74746572793a20696e76616c696420746f6b656e416d6f756e740000000060448201526064016102ba565b6002544211156104fb5760405162461bcd60e51b815260206004820152601c60248201527f4c6f74746572793a2068617320616c726561647920737461727465640000000060448201526064016102ba565b3360009081526003602052604090205481111561055a5760405162461bcd60e51b815260206004820152601c60248201527f4c6f74746572793a696e73756666696369656e742062616c616e63650000000060448201526064016102ba565b60096040518060800160405280336001600160a01b031681526020018381526020016004548152602001836004546105929190610c83565b905281546001808201845560009384526020938490208351600493840290910180546001600160a01b0319166001600160a01b03909216919091178155938301519084015560408201516002840155606090910151600390920191909155546105fc908290610c83565b600455336000908152600360205260408120805483929061061e908490610c9b565b9250508190555080600560008282546103679190610c83565b806106845760405162461bcd60e51b815260206004820152601c60248201527f4c6f74746572793a20696e76616c696420746f6b656e416d6f756e740000000060448201526064016102ba565b6000546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156106d657600080fd5b505af11580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e9190610ac9565b503360009081526003602052604081208054839290610367908490610c83565b6060600a805480602002602001604051908101604052809291908181526020016000905b82821015610450576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610752565b6009546107b3576001546107ae9042610c83565b600255565b60006107bd610904565b6040805180820182526001600160a01b03808416808352600480546020808601918252600a80546001810182556000918252965160029097027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a881018054989097166001600160a01b03199889161790965591517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a99095019490945560088054909516831790945554908352600390915291812080549394509192610883908490610c83565b909155505060045460075560068054600191906000906108a4908490610c83565b90915550506001546108b69042610c83565b6002556004546040516001600160a01b038316907f6fd0f3d9dfe1fc855741134e12830945e13fd19fd6a1a40acced1344e44c5be390600090a36108fc60096000610a3f565b506000600455565b6000806004544442604051602001610926929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c6109499190610ccd565b610954906001610c83565b90506000805b6009548111610a385760006009828154811061098657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402016002015484101580156109d95750600982815481106109c357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201600301548411155b90508015610a255760098281548110610a0257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600490910201546001600160a01b03169250610a389050565b5080610a3081610cb2565b91505061095a565b5092915050565b5080546000825560040290600052602060002090810190610a609190610a63565b50565b5b80821115610a975780546001600160a01b0319168155600060018201819055600282018190556003820155600401610a64565b5090565b600060208284031215610aac578081fd5b81356001600160a01b0381168114610ac2578182fd5b9392505050565b600060208284031215610ada578081fd5b81518015158114610ac2578182fd5b60008060208385031215610afb578081fd5b823567ffffffffffffffff80821115610b12578283fd5b818501915085601f830112610b25578283fd5b813581811115610b33578384fd5b866020828501011115610b44578384fd5b60209290920196919550909350505050565b600060208284031215610b67578081fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b82811015610bce57815180516001600160a01b03168552868101518786015285810151868601526060908101519085015260809093019290850190600101610b8b565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b82811015610bce57815180516001600160a01b03168552860151868501529284019290850190600101610bf8565b8215158152600060206040818401528351806040850152825b81811015610c5b57858101830151858201606001528201610c3f565b81811115610c6c5783606083870101525b50601f01601f191692909201606001949350505050565b60008219821115610c9657610c96610ced565b500190565b600082821015610cad57610cad610ced565b500390565b6000600019821415610cc657610cc6610ced565b5060010190565b600082610ce857634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207c2c764cb4ffed79d649cf05404f1718d031a3760aaeb182e35620b69cc046d064736f6c63430008040033";

type PackageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PackageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Package__factory extends ContractFactory {
  constructor(...args: PackageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lotteryToken: PromiseOrValue<string>,
    _participateInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Package> {
    return super.deploy(
      _lotteryToken,
      _participateInterval,
      overrides || {}
    ) as Promise<Package>;
  }
  override getDeployTransaction(
    _lotteryToken: PromiseOrValue<string>,
    _participateInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lotteryToken,
      _participateInterval,
      overrides || {}
    );
  }
  override attach(address: string): Package {
    return super.attach(address) as Package;
  }
  override connect(signer: Signer): Package__factory {
    return super.connect(signer) as Package__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PackageInterface {
    return new utils.Interface(_abi) as PackageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Package {
    return new Contract(address, _abi, signerOrProvider) as Package;
  }
}
