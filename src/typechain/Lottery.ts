/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Lottery {
  export type ParticipationInfoStruct = {
    totalAmountFrom: PromiseOrValue<BigNumberish>;
    totalAmountTo: PromiseOrValue<BigNumberish>;
  };

  export type ParticipationInfoStructOutput = [BigNumber, BigNumber] & {
    totalAmountFrom: BigNumber;
    totalAmountTo: BigNumber;
  };
}

export interface LotteryInterface extends utils.Interface {
  functions: {
    "claimWinnerReward(address,uint256)": FunctionFragment;
    "generateRandomNumber(uint256)": FunctionFragment;
    "getCurrect()": FunctionFragment;
    "getUserParticipations(address)": FunctionFragment;
    "interval()": FunctionFragment;
    "lastWinner()": FunctionFragment;
    "lastWonAmount()": FunctionFragment;
    "lotteryToken()": FunctionFragment;
    "nextParticipateTimestamp()": FunctionFragment;
    "participants(uint256)": FunctionFragment;
    "participate(uint256)": FunctionFragment;
    "randomNumber()": FunctionFragment;
    "randomWinnerIdx()": FunctionFragment;
    "rewardClaimed()": FunctionFragment;
    "selectRandomWinner()": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "totalGamesPlayed()": FunctionFragment;
    "totalParticipants()": FunctionFragment;
    "totalPayoutToday()": FunctionFragment;
    "totalPlayedAmount()": FunctionFragment;
    "winNumber()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimWinnerReward"
      | "generateRandomNumber"
      | "getCurrect"
      | "getUserParticipations"
      | "interval"
      | "lastWinner"
      | "lastWonAmount"
      | "lotteryToken"
      | "nextParticipateTimestamp"
      | "participants"
      | "participate"
      | "randomNumber"
      | "randomWinnerIdx"
      | "rewardClaimed"
      | "selectRandomWinner"
      | "totalAmount"
      | "totalGamesPlayed"
      | "totalParticipants"
      | "totalPayoutToday"
      | "totalPlayedAmount"
      | "winNumber"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimWinnerReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandomNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserParticipations",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "interval", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastWonAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextParticipateTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "randomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomWinnerIdx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectRandomWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalGamesPlayed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPayoutToday",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPlayedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "winNumber", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimWinnerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCurrect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserParticipations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "interval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastWonAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextParticipateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomWinnerIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectRandomWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalGamesPlayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPayoutToday",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPlayedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winNumber", data: BytesLike): Result;

  events: {
    "RandomWinningNumberSelect(address,uint256)": EventFragment;
    "UserParticipate(address,uint256,uint256,uint256)": EventFragment;
    "WinnerClaim(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RandomWinningNumberSelect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserParticipate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerClaim"): EventFragment;
}

export interface RandomWinningNumberSelectEventObject {
  txSender: string;
  winningNumber: BigNumber;
}
export type RandomWinningNumberSelectEvent = TypedEvent<
  [string, BigNumber],
  RandomWinningNumberSelectEventObject
>;

export type RandomWinningNumberSelectEventFilter =
  TypedEventFilter<RandomWinningNumberSelectEvent>;

export interface UserParticipateEventObject {
  user: string;
  totalAmountFrom: BigNumber;
  totalAmountTo: BigNumber;
  userParticipationId: BigNumber;
}
export type UserParticipateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  UserParticipateEventObject
>;

export type UserParticipateEventFilter = TypedEventFilter<UserParticipateEvent>;

export interface WinnerClaimEventObject {
  winner: string;
  intervalId: BigNumber;
  claimAmount: BigNumber;
}
export type WinnerClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WinnerClaimEventObject
>;

export type WinnerClaimEventFilter = TypedEventFilter<WinnerClaimEvent>;

export interface Lottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimWinnerReward(
      _winner: PromiseOrValue<string>,
      _winnerIntervalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateRandomNumber(
      participants: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrect(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserParticipations(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Lottery.ParticipationInfoStructOutput[]]>;

    interval(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastWinner(overrides?: CallOverrides): Promise<[string]>;

    lastWonAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotteryToken(overrides?: CallOverrides): Promise<[string]>;

    nextParticipateTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    participants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    participate(
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    randomNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    randomWinnerIdx(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardClaimed(overrides?: CallOverrides): Promise<[boolean]>;

    selectRandomWinner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalGamesPlayed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalParticipants(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPayoutToday(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPlayedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    winNumber(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  claimWinnerReward(
    _winner: PromiseOrValue<string>,
    _winnerIntervalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateRandomNumber(
    participants: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrect(overrides?: CallOverrides): Promise<BigNumber>;

  getUserParticipations(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Lottery.ParticipationInfoStructOutput[]>;

  interval(overrides?: CallOverrides): Promise<BigNumber>;

  lastWinner(overrides?: CallOverrides): Promise<string>;

  lastWonAmount(overrides?: CallOverrides): Promise<BigNumber>;

  lotteryToken(overrides?: CallOverrides): Promise<string>;

  nextParticipateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  participants(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  participate(
    _tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  randomNumber(overrides?: CallOverrides): Promise<BigNumber>;

  randomWinnerIdx(overrides?: CallOverrides): Promise<BigNumber>;

  rewardClaimed(overrides?: CallOverrides): Promise<boolean>;

  selectRandomWinner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalGamesPlayed(overrides?: CallOverrides): Promise<BigNumber>;

  totalParticipants(overrides?: CallOverrides): Promise<BigNumber>;

  totalPayoutToday(overrides?: CallOverrides): Promise<BigNumber>;

  totalPlayedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  winNumber(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claimWinnerReward(
      _winner: PromiseOrValue<string>,
      _winnerIntervalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateRandomNumber(
      participants: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrect(overrides?: CallOverrides): Promise<BigNumber>;

    getUserParticipations(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Lottery.ParticipationInfoStructOutput[]>;

    interval(overrides?: CallOverrides): Promise<BigNumber>;

    lastWinner(overrides?: CallOverrides): Promise<string>;

    lastWonAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryToken(overrides?: CallOverrides): Promise<string>;

    nextParticipateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    participants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    participate(
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    randomNumber(overrides?: CallOverrides): Promise<BigNumber>;

    randomWinnerIdx(overrides?: CallOverrides): Promise<BigNumber>;

    rewardClaimed(overrides?: CallOverrides): Promise<boolean>;

    selectRandomWinner(overrides?: CallOverrides): Promise<void>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalGamesPlayed(overrides?: CallOverrides): Promise<BigNumber>;

    totalParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    totalPayoutToday(overrides?: CallOverrides): Promise<BigNumber>;

    totalPlayedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    winNumber(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "RandomWinningNumberSelect(address,uint256)"(
      txSender?: PromiseOrValue<string> | null,
      winningNumber?: null
    ): RandomWinningNumberSelectEventFilter;
    RandomWinningNumberSelect(
      txSender?: PromiseOrValue<string> | null,
      winningNumber?: null
    ): RandomWinningNumberSelectEventFilter;

    "UserParticipate(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      totalAmountFrom?: null,
      totalAmountTo?: null,
      userParticipationId?: null
    ): UserParticipateEventFilter;
    UserParticipate(
      user?: PromiseOrValue<string> | null,
      totalAmountFrom?: null,
      totalAmountTo?: null,
      userParticipationId?: null
    ): UserParticipateEventFilter;

    "WinnerClaim(address,uint256,uint256)"(
      winner?: PromiseOrValue<string> | null,
      intervalId?: null,
      claimAmount?: null
    ): WinnerClaimEventFilter;
    WinnerClaim(
      winner?: PromiseOrValue<string> | null,
      intervalId?: null,
      claimAmount?: null
    ): WinnerClaimEventFilter;
  };

  estimateGas: {
    claimWinnerReward(
      _winner: PromiseOrValue<string>,
      _winnerIntervalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateRandomNumber(
      participants: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrect(overrides?: CallOverrides): Promise<BigNumber>;

    getUserParticipations(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interval(overrides?: CallOverrides): Promise<BigNumber>;

    lastWinner(overrides?: CallOverrides): Promise<BigNumber>;

    lastWonAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryToken(overrides?: CallOverrides): Promise<BigNumber>;

    nextParticipateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    participants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    participate(
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    randomNumber(overrides?: CallOverrides): Promise<BigNumber>;

    randomWinnerIdx(overrides?: CallOverrides): Promise<BigNumber>;

    rewardClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    selectRandomWinner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalGamesPlayed(overrides?: CallOverrides): Promise<BigNumber>;

    totalParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    totalPayoutToday(overrides?: CallOverrides): Promise<BigNumber>;

    totalPlayedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    winNumber(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimWinnerReward(
      _winner: PromiseOrValue<string>,
      _winnerIntervalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateRandomNumber(
      participants: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrect(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserParticipations(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastWonAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotteryToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextParticipateTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participate(
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    randomNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomWinnerIdx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selectRandomWinner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalGamesPlayed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalParticipants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPayoutToday(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPlayedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
